# jhjhjhjh Իրականացնել ռեկուրսիվ ֆունկցիա, որը կհաշվարկի փոխանցված ամբողջ թվի ֆակտորիալը։ Նաև պետք է ստուգել՝
# արդյոք փոխանցված արգումենտը հանդիսանում է ամբողջ թիվ, թե ոչ։


def factorial(int_num):
    if type(int_num) == type(int()) and int_num >= 0:
        if int_num == 0:
            return 1
        return int_num * factorial(int_num -1)
    else:
        return "You must enter positive integer."


# enumerate ներկառուցված մեթոդը ավելացնում է հաշվիչ (counter) իտերացվող օբյեկտի վրա և
# վերադարձնում է enumerate օբյեկտ, որն է իր հերթին հնարավոր է ներկայացնել list-ի տեսքով։ Իրականացնել
# պարզագույն enumerate ֆունկցիա, որն առաջին արգումենտով կստանա իտերացվող օբյեկտը (պետք է ստուգում կատարել՝
# արդյոք փոխանցված օբյեկտը իտերացվող է), իսկ երկրորդ արգումենտով start, որն էլ նշանակում է հաշվարկի սկիզբը
# (default 0 է վերագրված)։Վերադարձվող օբյեկտը կարող է լինել tuple-ների list։
from collections.abc import Iterable
def enumerate(iter_obg, start = 0):
    if isinstance(iter_obg, Iterable):
        res = [(start + i, iter_obg[i]) for i in range(len(iter_obg))]
        return res
    return "The argument is not iterable."


# Իրականացնել ֆունկցիա, որը որպես արգումենտ կստանա ամբողջ թիվ և կվերադարձնի True, եթե այդ թիվը չորսի աստիճան է
# և False` հակառակ դեպքում։ Խնդիրը իրականացնել հնարավորինս օպտիմալ եղանակով

def is_power_of_four(n):
    if n ==1 or n > 0 and bin(n).count("1") == 1 and (bin(n)[bin(n).index("1"):].count("0"))%2 == 0:
        return True
    return False


# filter ներդրված ֆունկցիան ստանում է երկու արգումենտ և վերադարձնում իտերատոր։ Եթե ֆունկցիան None է,
# ապա վերադարձվում են միայն այն էլեմենտները, որոնք true են։ Իրականացնել filter ֆունկցիան։


def filter(func, iterable):
    if func is None:
      return iter([i for i in iterable if i])
    if func is not None:
        return iter([i for i in iterable if func(i)])


import unittest

#pytest


def add(a, b):
    return a + b


class CustomTest(unittest.TestCase):
    def test_add_integers(self, a, b):
        result = add(3, 5)
        self.assertEqual(8, result)

    def test_add_float_numbers(self):
        result = add(0.1, 0.2)
        self.assertEqual(0.3, result)


if __name__ == "__main__":
    unittest.main()


# validations one letter greater 1.name Input 2. surname Input , 3. middle name
# tel number regexex`
# run time search
# birth date 31.Dec.2010 inch dzevov el gri
# email validation
# mi hat el requarements.txt
# freeze > requiarements.txt
# mer anvamb branch-i mej branch enq bacum PR enq anum poor request
# console tarberakum petq a beri anyndhat hamarnery mas mas orinak 0, 09, 094 ev ayln



